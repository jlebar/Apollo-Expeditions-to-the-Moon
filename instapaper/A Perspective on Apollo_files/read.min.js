function evernote_post(bookmark_id) {
    event.preventDefault();
    window.resetInterface();
    
    $('.evernote_confirm').animate({
        top: '-5px'
    }, 350, function() {
        setTimeout(function() {
            $('.evernote_confirm').animate({
                top: '-60px'
            }, 250);
        }, 900);
    });
    
    form = bookmark_id == undefined? '.share_to_evernote_form': '.share_to_evernote_form_' + bookmark_id;
    data = $(form).serialize()
    $.post(
        '/user/share_to_evernote',
        data
    ).success(function() {
    }).error(function() {
    });

    return false;
}


function highlightRegex(text) {
    // rhill 2012-01-29: escape regex chars first
    // http://stackoverflow.com/questions/280793/case-insensitive-string-replacement-in-javascript
    return new RegExp(text.replace(/[.*+?|()\[\]{}\\$^]/g,'\\$&'),'ig');
}
        
/**************** HIGHLIGHTING CODE ***************************/
// Using the excellent highlighter code from Raymond Hill
// Author: Raymond Hill
// Version: 2011-01-17
// Title: HTML text hilighter
// Permalink: http://www.raymondhill.net/blog/?p=272
// Purpose: Hilight portions of text inside a specified element, according to a search expression.
// Key feature: Can safely hilight text across HTML tags.
// History:
//   2012-01-29
//     fixed a bug which caused special regex characters in the
//     search string to break the highlighter
        
function doHighlight(node,className,clipID,searchFor,which,index,apiID,isNote,noteText,highlightText){
    var doc = document;
            
    // normalize node argument
    if (typeof node === 'string') {
        node = doc.getElementById(node);
    }
            
    // normalize search arguments, here is what is accepted:
    // - single string
    // - single regex (optionally, a 'which' argument, default to 0)
    if (typeof searchFor === 'string') {
        searchFor = highlightRegex(searchFor);
    }
    which = which || 0;
    index = index || 0;
            
    // initialize root loop
    var indices = [],
        text = [], // will be morphed into a string later
        iNode = 0,
        nNodes = node.childNodes.length,
        nodeText,
        textLength = 0,
        stack = [],
        child, nChildren,
        state,
        noteCreated = false;
    // collect text and index-node pairs
    for (;;){
        while (iNode<nNodes){
               child=node.childNodes[iNode++];
            // text: collect and save index-node pair
            if (child.nodeType === 3){
                if (child.parentNode.tagName.toLowerCase() == 'a' &&
                    child.parentNode.className == 'ipfootnote_ref') {
                    continue;
                }
                indices.push({i:textLength, n:child});
                nodeText = child.nodeValue;
                text.push(nodeText);
                textLength += nodeText.length;
            }
            // element: collect text of child elements,
            // except from script or style tags
            else if (child.nodeType === 1){
                // skip style/script tags
                if (child.tagName.search(/^(script|style)$/i)>=0 ||
                    (child.tagName.toLowerCase() == 'sup' &&
                     child.getAttribute('data-footnote-ref') != undefined &&
                     child.getAttribute('data-footnote-ref').indexOf('#ipfootnote') == 0)) {
                    continue;
                }
                // add extra space for tags which fall naturally on word boundaries
                if (child.tagName.search(/^(a|b|basefont|bdo|big|em|font|i|s|small|span|strike|strong|su[bp]|tt|u)$/i)<0){
                    text.push(' ');
                    textLength++;
                }
                // save parent's loop state
                nChildren = child.childNodes.length;
                if (nChildren){
                    stack.push({n:node, l:nNodes, i:iNode});
                    // initialize child's loop
                    node = child;
                    nNodes = nChildren;
                    iNode = 0;
                }
            }
        }
        // restore parent's loop state
        if (!stack.length){
            break;
        }
        state = stack.pop();
        node = state.n;
        nNodes = state.l;
        iNode = state.i;
    }
    
    // quit if found nothing
    if (!indices.length){
        return;
    }
    
    // morph array of text into contiguous text
    text = text.join('');
    
    // sentinel
    indices.push({i:text.length});
    
    // find and hilight all matches
    var iMatch, matchingText,
    iTextStart, iTextEnd,
    i, iLeft, iRight,
    iEntry, entry,
    parentNode, nextNode, newNode,
    iNodeTextStart, iNodeTextEnd,
    textStart, textMiddle, textEnd;
    
    matchingText = null;
    for (var i = 0; i <= index; i++) {
        // find matching text, stop if none
        matchingText = searchFor.exec(text);
        if (!matchingText || matchingText.length<=which || !matchingText[which].length){
            break;
        }
    }
    
    if (!matchingText)
        return;
        
    // calculate a span from the absolute indices
    // for start and end of match
    iTextStart = matchingText.index;
    for (iMatch=1; iMatch < which; iMatch++){
        iTextStart += matchingText[iMatch].length;
    }
    iTextEnd = iTextStart + matchingText[which].length;
        
    // find entry in indices array (using binary search)
    iLeft = 0;
    iRight = indices.length;
    while (iLeft < iRight) {
           i=iLeft + iRight >> 1;
        if (iTextStart < indices[i].i){iRight = i;}
        else if (iTextStart >= indices[i+1].i){iLeft = i + 1;}
        else {iLeft = iRight = i;}
    }
    iEntry = iLeft;
        
    // for every entry which intersect with the span of the
    // match, extract the intersecting text, and put it into
    // a span tag with specified class
    while (iEntry < indices.length){
        entry = indices[iEntry];
        node = entry.n;
        nodeText = node.nodeValue;
        parentNode = node.parentNode;
        nextNode = node.nextSibling;
        iNodeTextStart = iTextStart - entry.i;
        iNodeTextEnd = Math.min(iTextEnd,indices[iEntry+1].i) - entry.i;
            
        // slice of text before hilighted slice
        textStart = null;
        if (iNodeTextStart > 0){
            textStart = nodeText.substring(0,iNodeTextStart);
        }
            
        // hilighted slice
        textMiddle = nodeText.substring(iNodeTextStart,iNodeTextEnd);
            
        // slice of text after hilighted slice
        textEnd = null;
        if (iNodeTextEnd < nodeText.length){
            textEnd = nodeText.substr(iNodeTextEnd);
        }
            
        // update DOM according to found slices of text
        if (textStart){
            node.nodeValue = textStart;
        }
        else {
            parentNode.removeChild(node);
        }

        if (parentNode.className != 'bigfoot-footnote__button') {
            newNode = doc.createElement('span');
            newNode.appendChild(doc.createTextNode(textMiddle));
            newNode.className = className;
            newNode.setAttribute('rel', clipID);
            newNode.setAttribute('data-api-id', apiID);
            newNode.addEventListener('click', highlightTapped, false);
            parentNode.insertBefore(newNode,nextNode);
        }

        if (textEnd){
            if (isNote) {
                newNodeContainer = createNoteIconAndPopover(clipID, noteText, highlightText, index);
                parentNode.insertBefore(newNodeContainer, nextNode);
                noteCreated = true;
            }
            newNode = doc.createTextNode(textEnd);
            parentNode.insertBefore(newNode,nextNode);
            indices[iEntry] = {n:newNode,i:iTextEnd}; // important: make a copy, do not overwrite
        }
            
        // if the match doesn't intersect with the following
        // index-node pair, this means this match is completed
        iEntry++;
        if (iTextEnd <= indices[iEntry].i){
            if (isNote && !noteCreated) {
                newNodeContainer = createNoteIconAndPopover(clipID, noteText, highlightText, index);
                parentNode.insertBefore(newNodeContainer, nextNode);
                noteCreated = true;
            }
            return;
        }
    }
}
        
function quickHighlight(clipID, textToFind, index, apiID, isNote, noteText) {
    textToFind = textToFind.trim();
    search_for = new RegExp(textToFind.replace(/[.*+?|()\[\]{}\\$^]/g,'\\$&').replace(/\s+/g,'\\s+'),'ig');
    doHighlight(document.getElementById('story'),
                'highlight highlight-' + clipID,
                clipID, search_for, 0, index, apiID, isNote, noteText, textToFind);
}

function createNoteIconAndPopover(clipID, noteText, highlightText, index) {
    newNode = document.createElement('span');
    newNode.setAttribute('id', 'ipnote-' + clipID);
    newNode.className = 'ipicon ipnote';
    newNode.setAttribute('rel', clipID);
    newNode.setAttribute('data-highlight', highlightText);
    newNode.setAttribute('data-position', index);
    newNode.addEventListener('click', noteTapped, false);
    if (noteText) {
        newNode.setAttribute('data-comment', noteText);
    }
    else {
        newNode.setAttribute('data-comment', '');
    }

    newNodeContainer = document.createElement('span');
    newNodeContainer.setAttribute('id', 'ipnote-container-' + clipID);
    newNodeContainer.className = 'ipnote-container';
    newNodeContainer.appendChild(newNode);

    commentPopover = document.createElement('div');
    commentPopover.setAttribute('id', 'comment-popover-' + clipID);
    commentPopover.setAttribute('rel', clipID);
    commentPopover.className = 'ipnote-popover';
    
    arrow = document.createElement('div');
    arrow.className = 'arrow';
    commentPopover.appendChild(arrow);
    
    commentEditHeader = document.createElement('div');
    commentEditHeader.className = 'header';
    cancelButton = document.createElement('div');
    cancelButton.className = 'cancel-button';
    cancelButton.setAttribute('rel', clipID);
    cancelButton.addEventListener('click', noteCancelTapped, false);
    cancelButton.appendChild(document.createTextNode('Cancel'));
    commentEditHeader.appendChild(cancelButton);

    saveButton = document.createElement('div');
    saveButton.className = 'save-button';
    saveButton.setAttribute('rel', clipID);
    saveButton.appendChild(document.createTextNode('Save'));
    saveButton.addEventListener('click', noteSaveTapped, false);
    commentEditHeader.appendChild(saveButton);
    commentPopover.appendChild(commentEditHeader);
    
    var titleText = noteText && noteText.length > 0? 'Comment': 'New Note';
    title = document.createElement('div');
    title.className = 'ipnote-title';
    title.setAttribute('id', 'ipnote-title-' + clipID);
    title.appendChild(document.createTextNode(titleText));
    commentEditHeader.appendChild(title);

    commentTextArea = document.createElement('textarea');
    commentTextArea.setAttribute('id', 'comment-textarea-' + clipID);
    commentTextArea.value = noteText? noteText: '';
    commentPopover.appendChild(commentTextArea);
    newNodeContainer.appendChild(commentPopover);
    
    return newNodeContainer;
}

function htmlDecode(input){
    var e = document.createElement('div');
    e.innerHTML = input;
    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}
        
function highlightWithJson(highlights) {
    for (var i = 0; i < highlights.length; i++) {
        try {
            var text = htmlDecode(highlights[i].text);
            if (text.length)
                quickHighlight(highlight_id++,
                               text,
                               highlights[i].position,
                               highlights[i].highlight_id,
                               highlights[i].note && highlights[i].note.length > 0,
                               highlights[i].note);
        } catch(err) {
            ;
        }
    }
}
        
function indexOfSelectedTextOccurrence() {
    var selection = textSelection();
    var range = selection.getRangeAt(0);
    var precedingRange = document.createRange();
    precedingRange.setStartBefore(document.getElementById('story'));
    precedingRange.setEnd(range.startContainer, range.startOffset);
    var textPrecedingSelection = precedingRange.toString();
    var regex = highlightRegex(selection.toString());
    var result = null;
    var count = 0;
    while ((result = regex.exec(textPrecedingSelection))) {
        count++;
    }
    return count;
}

function highlightSelection(highlightId, index) {
    highlightSelection(highlightId, index, false);
}
 
function highlightSelection(highlightId, index, isNote) {
    var selection = textSelection();
    var highlights = document.getElementsByClassName('highlight');
    var removeHighlightIds = [];
    for (var i = 0; i < highlights.length; i++) {
        var local_id = parseInt(highlights[i].getAttribute('rel'))
        if (selection.containsNode && 
            selection.containsNode(highlights[i], false) &&
            removeHighlightIds.indexOf(local_id) == -1) {
            removeHighlightIds.push(local_id);
        }
    }
    
    quickHighlight(highlightId, selection.toString(), index, -1, isNote);
    return removeHighlightIds;
}

function removeHighlightClass(highlightId) {
    var highlights = document.getElementsByClassName('highlight-' + highlightId);
    for (var i = 0; i < highlights.length; i++) {
        removeClass(highlights[i], 'highlight');
    }
}
        
function removeHighlight(highlightId) {
    var highlights = document.getElementsByClassName('highlight-' + highlightId);
    var remove_api_id = -1;
    for (var i = 0; i < highlights.length; i++) {
        try {        
            remove_api_id = highlights[i].getAttribute('data-api-id');
            removeClass(highlights[i], 'highlight');
            highlights[i].removeAttribute('rel');
            highlights[i].removeAttribute('data-api-id');
            highlights[i].removeEventListener('click', highlightTapped);
        } catch (e) {
            // .removeAttribute not supported well in IE9 -DSL
            // console.log("removeHighlight exception", e);
        }
        
    }

    window.highlights_this_month -= 1
    removeNote(highlightId);

    if (remove_api_id != -1) {
        $.post(
            '/highlight/' + remove_api_id + '/delete'
        ).success(function(response) {
            json = JSON.parse(response)
            /* This is asynchronous and can happen many times in a row */
            if (json['highlights_this_month'] < window.highlights_this_month)
                window.highlights_this_month = json['highlights_this_month'] 
        }).error(function(response) {
            //console.log('Fail')
        })
    }

    for (var i = 0; i < highlights.length; i++) {
        /* This breaks the iterator */
        highlights[i].removeAttribute('class');
    }
}

function removeNote(highlightId) {
    var noteContainer = document.getElementById('ipnote-container-' + highlightId);
    if (noteContainer) {
        noteContainer.parentNode.removeChild(noteContainer);
    }
}

// 

var highlight_id = 0

function highlightTapped(e) {
    e.stopPropagation();
    var highlight = e.target;
    var topPadding = highlight.getBoundingClientRect().top;
    var highlights = document.getElementsByClassName('highlight-' + highlight.getAttribute('rel'));
    for (var i = 0; i < highlights.length; i++) {
        var rect = highlights[i].getBoundingClientRect();
        if (rect.top < topPadding)
            topPadding = rect.top;
    }

    hideHighlightPopovers();
    highlight_delete_popover = document.getElementById('highlight_delete_popover');
    highlight_delete_popover.style.top = window.pageYOffset + topPadding - 50 + 'px';
    addClass(highlight_delete_popover, 'reveal');
    highlight_delete_popover.setAttribute('data-highlight-id', highlight.getAttribute('rel'));
    highlight_delete_popover.setAttribute('data-api-id', highlight.getAttribute('data-api-id'));
}

function noteTapped(e) {
    e.stopPropagation();
    var noteIcon = e.target;
    var noteId = noteIcon.getAttribute('rel');
    var notePopover = document.getElementById('comment-popover-' + noteId);
    if (hasClass(notePopover, 'showing') && shouldDismissPopover(noteId)) {
        hideHighlightPopovers();
        removeClass(notePopover, 'showing');
    }
    else {
        /* BD: This is to get cursor at end, weird */
        var value = $('#comment-textarea-' + noteId).val();
        $('#comment-textarea-' + noteId).val('').val(value);
        
        hideHighlightPopovers();
        addClass(notePopover, 'showing');
        $('#comment-textarea-' + noteId).focus();
    }
}

function noteCancelTapped(e) {
    e.stopPropagation();
    var cancelButton = e.target;
    var noteId = cancelButton.getAttribute('rel');
    var popover = document.getElementById('comment-popover-' + noteId);
    var note = document.getElementById('ipnote-' + noteId);
    var commentText = note.getAttribute('data-comment');
    if (!commentText || commentText.length == 0) {
        /* FIXME: Figure out how to animate out gracefully
         */

        note.style.display = 'none';
        removeHighlightClass(noteId);
        removeClass(popover, 'showing');
        setTimeout(function() {
            removeHighlight(noteId);
        }, 500);
    }
    else {
        var commentTextArea = document.getElementById('comment-textarea-' + noteId);
        commentTextArea.value = commentText;
        removeClass(popover, 'showing');
    }
}

function noteSaveTapped(e) {
    var saveButton = e.target;
    var noteId = saveButton.getAttribute('rel');
    var note = document.getElementById('ipnote-' + noteId);
    var popover = document.getElementById('comment-popover-' + noteId);
    var priorComment = note.getAttribute('data-comment');
    var hadComment = priorComment && priorComment.length > 0;

    var commentTextArea = document.getElementById('comment-textarea-' + noteId);
    var commentText = commentTextArea.value;
    if (!hadComment && commentText.length == 0) {
        alert('Your note is empty!');
        return;
    }

    note.setAttribute('data-comment', commentText);

    if (!hadComment) {
        var highlightText = note.getAttribute('data-highlight');
        var position = note.getAttribute('data-position');
        var title = document.getElementById('ipnote-title-' + noteId);
        title.innerText = 'Comment';
        postHighlight(noteId, highlightText, position, commentText);
        removeClass(popover, 'showing');
    }
    else if (priorComment == commentText) {
        removeClass(popover, 'showing');
    }
    else {
        updateNote(noteId, commentText);
        removeClass(popover, 'showing');
        if (commentText.length == 0) {
            setTimeout(function() {
                removeNote(noteId);
            }, 350);
        }
    }
}

function textSelection() {
    if (window.getSelection)
        return window.getSelection()
    else if (document.getSelection)
        return document.getSelection()
    else if (document.selection)
        return document.selection
    else
        return undefined
}

function clearSelection() {
    if (window.getSelection) {
        if (window.getSelection().empty) {  // Chrome
            window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges) {  // Firefox
            window.getSelection().removeAllRanges();
        }
    } else if (document.selection) {  // IE?
        document.selection.empty();
    }
}

function ancestor(el, cls) {
    while ((el = el.parentElement) && !el.classList.contains(cls));
    return el;
}

function shouldDismissPopover(noteId) {
    var textarea = document.getElementById('comment-textarea-' + noteId);
    var note = document.getElementById('ipnote-' + noteId);
    var priorText = note.getAttribute('data-comment');
    return priorText && priorText.length && priorText == textarea.value;
}

function dismissCommentPopovers(e) {
    if (ancestor(e.target, 'ipnote-popover'))
        return;

    var popovers = document.getElementsByClassName('ipnote-popover showing');
    for (var i = 0; i < popovers.length; i++) {
        var noteId = popovers[i].getAttribute('rel');
        if (shouldDismissPopover(noteId))
            removeClass(popovers[i], 'showing');
    }
}

document.addEventListener('click', function(e) {
    dismissCommentPopovers(e);
    // A complete click will hide both popovers unless a .highlight click event cancels propogation
    checkForValidHighlightSelection(e, true);
}, false);

// Need to use mouseup listener in conjunction with 'click' because
// Firefox DOES NOT fire a click event after: long mousedown-->drag-select-text-->mouseup
document.addEventListener('mouseup', function(e) {
    // We disable hides on mouseup otherwise this event would always override the click event
    checkForValidHighlightSelection(e, false);
}, false);

function bannedElements() {
    banned = []
    var titlebar = document.getElementById('titlebar');
    if (titlebar != undefined)
        banned.push(titlebar);

    var footnotes = document.getElementsByClassName('bigfoot-footnote__content');
    for (var i = 0; i < footnotes.length; i++) {
        banned.push(footnotes[i]);
    }
    
    return banned;
}

function checkForValidHighlightSelection(e, allowHide) {
    // Put this on a quick-firing timeout so that when clicking within selected text,
    // textSelection() doesn't return something valid -DSL
    setTimeout(function() {
        if (window.text_only)
            return;

        var highlight_popover = document.getElementById('highlight_create_popover');
        var selection = textSelection()
        if (selection && selection.toString().length && selection.toString().length > 1) {
            var banned = bannedElements()
            for (var i = 0; i < banned.length; i++) {
                if (selection.containsNode &&
                    (selection.containsNode(banned[i], false) ||
                     selection.containsNode(banned[i], true))) {
                    /* Prevent highlight on banned elements */
                    return;
                }
            }

            var popovers = document.getElementsByClassName('ipnote-popover showing');
            for (var i = 0; i < popovers.length; i++) {
                var noteId = popovers[i].getAttribute('rel');
                var textarea = document.getElementById('comment-textarea-' + noteId);
                var note = document.getElementById('ipnote-' + noteId);
                var priorText = note.getAttribute('data-comment');
                if (priorText && priorText.length && priorText != textarea.value)
                    // Do not allow highlight creation during popover edit mode
                    return;
            }
            
            var highlights = document.getElementsByClassName('highlight');
            var top;
            for (var i = 0; i < highlights.length; i++) {
                if (selection.containsNode && !selection.containsNode(highlights[i], false) &&
                    selection.containsNode(highlights[i], true)) {
                    /* Prevent highlight over partial highlight */
                    return;
                }
            }

            hideHighlightPopovers();

            rect = selection.getRangeAt(0).getBoundingClientRect();
            top = window.pageYOffset + rect.top - 50 + 'px';
            showHighlightCreatePopover(top);
        } else if (allowHide) {
            hideHighlightPopovers();
        }
    }, 0);
}

function showHighlightCreatePopover(top) {
    var highlight_popover = document.getElementById('highlight_create_popover');
    highlight_popover.style.top = top
    addClass(highlight_popover, 'reveal')
}

function hideHighlightPopovers() {
    var highlight_popover = document.getElementById('highlight_create_popover');
    var highlight_delete_popover = document.getElementById('highlight_delete_popover');
    removeClass(highlight_popover, 'reveal');
    removeClass(highlight_delete_popover, 'reveal');
}

function addClass(el, newClassName){
    el.className += ' ' + newClassName;   
}

function removeClass(el, removeClassName){
    var newClassName = ''
    var classes = el.className.split(' ');
    for (var i = 0; i < classes.length; i++) {
        if (classes[i] != removeClassName) {
            newClassName += classes[i]
            if (i != classes.length - 1)
                newClassName += ' '
        }
    }

    el.className = newClassName;
}

function toggleClass(el, toggleClassName) {
    if (hasClass(el, toggleClassName))
        removeClass(el, toggleClassName);
    else 
        addClass(el, toggleClassName);
}

function hasClass(el, className) {
    return el.className.indexOf(className) != -1
}

function updateNote(local_id, note) {
    var highlight = document.getElementsByClassName('highlight-' + local_id)[0];
    var api_id = highlight? highlight.getAttribute('data-api-id'): undefined;
    if (!api_id) {
        console.log('Highlight for local ID %d does not have API ID, failed to update note.');
        alert('There was an error updating your comment, please try again!');
        return;
    }

    $.post(
        '/highlight/' + api_id + '/update_note',
        'note=' + note
    ).success(function(response) {
    }).error(function(resopnse) {
        //FIXME: Handle this nicely
    })
}

function selectionHTML() {
    var selection = window.getSelection();
    var range = selection.getRangeAt(0);
    var span = document.createElement('span');
    span.appendChild(range.cloneContents());
    return span.innerHTML;
}

function getElementByXpath(path) {
    return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

function dropEmptyElems(parent) {
    if (parent == null)
        return null;
    
    var emptyElems = [];
    for (var i = 0; i < parent.childNodes.length; i++) {
        childNode = parent.childNodes[i];
        if (childNode.nodeType == 3)
            continue;
        else if (childNode.innerText == undefined || hasClass(childNode, 'ipnote'))
            emptyElems.push(childNode);
        else {
            var text = childNode.innerText.replace(/(\r\n|\n|\r)/gm," ").trim();
            if (text.length == 0)
                emptyElems.push(childNode);
        }
        
        if (childNode.childNodes.length)
            dropEmptyElems(childNode);
    }
    
    for (var i = 0; i < emptyElems.length; i++) {
        emptyElem = emptyElems[i];
        if (emptyElem.parentNode) {
            emptyElem.parentNode.removeChild(emptyElem);
        }
    }
    
    return parent;
}
        
function dataBeforeSelection() {
    var selection = window.getSelection();
    var range = selection.getRangeAt(0);
    var precedingRange = document.createRange();
    var start = document.getElementById('story');
    var hpVersionElem = getElementByXpath('//div[@id="story"]/div/small/em[starts-with(text(), "HolyParser")]/../..');
    if (hpVersionElem) {
        precedingRange.setStartAfter(hpVersionElem);
    }
    else {
        precedingRange.setStartBefore(start);
    }
    precedingRange.setEnd(range.startContainer, range.startOffset);
    var text = precedingRange.toString().replace('CancelSaveComment', ' ').replace(/(\r\n|\n|\r)/gm," ").trim();
    if (text.length > 200) {
        text = text.substr(text.length - 200, 200);
    }
    
    var span = document.createElement('span');
    var rangeContentsWithoutImages = dropEmptyElems(precedingRange.cloneContents());
    span.appendChild(rangeContentsWithoutImages);
    var html = span.innerHTML;
    if (html.length > 200) {
        html = html.substr(html.length - 200, 200);
    }
    
    return {'text': text, 'html': html};
}
        
function dataAfterSelection() {
    var selection = window.getSelection();
    var range = selection.getRangeAt(0);
    var afterRange = document.createRange();
    var story = document.getElementById('story');
    var lastChild = story;
    if (story.childNodes.length > 0)
        lastChild = story.childNodes[story.childNodes.length - 1];
    afterRange.setStart(range.endContainer, range.endOffset);
    afterRange.setEndAfter(lastChild);
    var text = afterRange.toString().replace('CancelSaveComment', ' ').replace(/(\r\n|\n|\r)/gm," ").trim();
    
    var span = document.createElement('span');
    var rangeContentsWithoutImages = dropEmptyElems(afterRange.cloneContents());
    span.appendChild(rangeContentsWithoutImages);
    return {'text': text.substr(0, 200),
            'html': span.innerHTML.substr(0, 200)};
}

function postHighlight(local_id, text, position, note) {
    var params = 'text=' + encodeURIComponent(text) + '&position=' + position;
    if (note) {
        params += '&note=' + encodeURIComponent(note);
    }

    var ipnote = document.getElementById('ipnote-' + local_id);
    if (ipnote != undefined) {
        var before_html = ipnote.getAttribute('before_html');
        var before_text = ipnote.getAttribute('before_text');
        var after_html = ipnote.getAttribute('after_html');
        var after_text = ipnote.getAttribute('after_text');
        var fragment = ipnote.getAttribute('fragment');

        if (before_html && before_text && after_html && after_text && fragment) {
            params += '&before_html=' + encodeURIComponent(before_html);
            params += '&before_text=' + encodeURIComponent(before_text);
            params += '&after_html=' + encodeURIComponent(after_html);
            params += '&after_text=' + encodeURIComponent(after_text);
            params += '&fragment=' + encodeURIComponent(fragment);
        }
    }

    $.post(
        '/bookmark/' + $('#story').attr('data-id') + '/highlight',
        params
    ).success(function(response) {
        json = JSON.parse(response)
        api_id = json['highlight_id']
        window.highlights_this_month = json['highlights_this_month']
        $('.highlight-' + local_id).each(function() {
            $(this).attr('data-api-id', api_id)
        })
        console.log(response)
    }).error(function(response) {
        //FIXME: Handle this nicely
    })
}

$(function() {
    $('.highlight_popover').mousedown(function(e) {
        return false
    })

    $('#note_create').click(function(e) {
        var selection = textSelection()
        if (selection && selection.toString().length) {
            if (!window.is_subscriber && window.highlights_this_month >= window.highlights_monthly_limit) {
                hideHighlightPopovers();
                $('#highlight_limit_modal_launcher').trigger('click');
                window.ga('send', 'event', 'read', 'highlight limit')
                return
            }

            e.stopPropagation()
            window.highlights_this_month += 1

            var fragment = selectionHTML();
            var beforeValues = dataBeforeSelection();
            var afterValues = dataAfterSelection();
            var text = selection.toString()
            var position = indexOfSelectedTextOccurrence()
            
            var local_id = highlight_id++
            var remove_ids = highlightSelection(local_id, position, true)
            for (var i = 0; i < remove_ids.length; i++) {
                removeHighlight(remove_ids[i])
            }

            var ipnote = document.getElementById('ipnote-' + local_id);
            ipnote.setAttribute('before_html', beforeValues['html']);
            ipnote.setAttribute('before_text', beforeValues['text']);
            ipnote.setAttribute('after_html', afterValues['html']);
            ipnote.setAttribute('after_text', afterValues['text']);
            ipnote.setAttribute('fragment', fragment);

            clearSelection()
            $('#highlight_create_popover').removeClass('reveal');

            var commentPopover = document.getElementById('comment-popover-' + local_id);
            if (commentPopover) {
                setTimeout(function() {
                    addClass(commentPopover, 'showing');
                    $('#comment-textarea-' + local_id).focus();
                }, 10);
            }
        }
    })

    $('#highlight_create').click(function(e) {
        var selection = textSelection()
        if (selection && selection.toString().length) {
            if (!window.is_subscriber && window.highlights_this_month >= window.highlights_monthly_limit) {
                hideHighlightPopovers();
                $('#highlight_limit_modal_launcher').trigger('click');
                window.ga('send', 'event', 'read', 'highlight limit')
                return
            }

            window.highlights_this_month += 1

            var text = selection.toString()
            var position = indexOfSelectedTextOccurrence()
            var local_id = highlight_id++
            var remove_ids = highlightSelection(local_id, position)
            for (var i = 0; i < remove_ids.length; i++) {
                removeHighlight(remove_ids[i])
            }

            clearSelection()
            $('#highlight_create_popover').removeClass('reveal');
            window.ga('send', 'event', 'read', 'highlight');
            postHighlight(local_id, text, position); 
        }
        e.stopPropagation()
    })

    $('#highlight_delete_popover').click(function(e) {
        window.ga('send', 'event', 'read', 'highlight delete');
        removeHighlight($(this).attr('data-highlight-id'))
        $(this).removeClass('reveal');
        e.stopPropagation()
    });
});


function speedRead() {

    var MIN_WPM = 200;
    var DelayMethods = { IOS: 1, DYNAMIC: 2};
    var variableDelayMethod = DelayMethods.DYNAMIC;
    var wordEl = document.getElementById("speedWordContainer");
    var jsFallback = $("#speedRuler").text().trim() == "";    
    var text = jsFallback ? getInnerText(document.getElementById("story")) +" ◆": document.getElementById("speedRuler").textContent
    var textNodes = [];
    var occurrenceMap = [];
    var words = [],
        wpm = $("#wpmControl").val(),
        currentWord = 0,
        isPlaying = true,
        isScrolling = false,
        finished = false,
        snapStart = 0,
        tracked = !$('#story').length,
        scrollPoller,
        totalTimeSaved = parseInt($("#speedRead").attr("data-timeSaved") == "None" ? 0 : $("#speedRead").attr("data-timeSaved")),
        iScroll,
        isSnapping = false;
        delay = 60.0/wpm * 1000,
        currentOrientation = window.orientation,
        orientationChanged = false;

    var keyHandler = function(e) {
      if (e.keyCode == 0 || e.keyCode == 32) {
            togglePlay();
      }
    }
    var toggleHandler =  function(e) {
        if (e.target.id == "wpmControl") return;
        if ($(".popover").css("display") == "block" ) {
            return;
        }
        var snapD = new Date().getTime()-snapStart;
        var wasScrolling = isScrolling && new Date().getTime()-iScroll.startTime > 500

        if (isPlaying || (snapD >= 500 && !wasScrolling && !iScroll.moved) ) {
            togglePlay();    
        }
        
    };

    var orientationHandler = function() {
        if (window.orientation != currentOrientation && window.orientation != currentOrientation * -1) {
            currentOrientation = window.orientation;
            orientationChanged = true;
            adjustLayout(isPlaying);
        }
    }

    function initScrollerDom() {    
        var scroller = document.getElementById("speedScroller");
        $("#speedRuler").html(text.replace(" ","&nbsp;"));
        for (var i =0; i < words.length; i++ ) {
            var span = document.createElement("span");
            span.id = "speedWord-"+i;
            span.appendChild(document.createTextNode(words[i]+"\u00A0"));
            scroller.appendChild(span);            
        }
    }

    function createCookie(name, value, days) {
      var cookie, date, expires;
      if (days) {
        date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
      } else {
        expires = "";
      }
      cookie = name + "=" + escape(value) + expires + "; path=/";
      return document.cookie = cookie;
    };

    function sanitizeString(text) {
        text = text.replace(/\r?\n/g, " ");
        text = text.replace(/ /," ");
        text = text.replace(/—/g,"— ");
        text = text.replace(/–/g,"– ");
        text = text.replace(/-/g,"- ");
        text = text.replace(/ — /g," ");
        text = text.replace(/ – /g," ");
        text = text.replace(/ - /g," ");
        text = text.replace(/\.\.\./g,"... ");
        text = text.replace(/…/g,"… ");
        text = text.replace(/\//g," ");
        text = text.replace(/\\/g," ");
        text = text.replace(/\s+/g, " ");        
        return text.trim();
    }

    function getElementSnapX(targetEl) {
        var leftMargin = $("aside.logo").is(":visible") ? ($(window).width()-$(".container-fluid").width())/2-10 : 6;
        var targetX = IScroll.utils.offset(targetEl).left;
        var targetWidth = $(targetEl).width();
        var viewportWidth = iScroll.wrapperWidth;
        var newX = targetX+viewportWidth/2-targetWidth/2+leftMargin+15;
        return newX;
    }

    function adjustLayout(options) {
        options = options || {};
        var isMobileView = $("body").hasClass("mobile_mode") || !$("aside.logo").is(":visible");

        var speedWordHeight = $('#speedWordContainer').height();
        $('#speedWordContainer').css({
            position:'absolute',
            top: $(window).height()/2-speedWordHeight
        });     
        if (options.justSingleWord) return;
        $('#speedScrollerContainer').css({
            position:'absolute',
            top:0,
            bottom:0,
            paddingTop: $(window).height()/2-speedWordHeight,
            width: "100%"
        });     
        layoutScrollView();
        // $('#speedScrollerContainer').css("paddingTop", ($(window).height())/2)

        $("#speedReadProgress").css("top", $("#control_bar").outerHeight()+"px");
        $("#speedEndState").css("margin-top", $("#control_bar").outerHeight()+"px");
        $(".speed-stats").each(function(i,el) {
            if (!isMobileView) {
                $(el).css({"height":  "" });
                $(el).css("margin-top",  ($("#speedEndState").height()- $(el).height())/2-$(".premium_bar").height() -$(".page_header_read").height()+"px"  );
            } else {
                var rowHeight = ($(window).height()-$("#control_bar").outerHeight()-10)/3;
                $(el).css({"margin-top":  (rowHeight-$(el).children(":first").height())/2+"px"});

            }

        })
    }

    function secondsToString(seconds, suffix, justMinutes) {
        suffix = suffix||"";
        if (seconds < 60) {
            var s = seconds > 1 ? "s":"";
            return seconds + " Second"+s +" "+suffix;
        } else if (seconds < 60 * 60) {
            var minutes = Math.floor(seconds/60);
            var s = minutes > 1 ? "s":"";
            return minutes + " Minute"+s+ (!justMinutes && seconds-minutes*60 > 0 ? ", " +secondsToString(seconds-minutes*60,suffix,justMinutes) : " "+suffix) ;
        } else {
            var hours = Math.floor(seconds/(60*60));
            var s = hours > 1 ? "s":"";
            return hours + " Hour"+s+ (seconds-hours*60*60 > 0 ? ", " +secondsToString(seconds-hours*60*60, suffix,justMinutes) : " "+suffix) ;
        }        
    }
    function setProgress(wordIndex) {
        $("#speedReadProgress").css('width', (wordIndex/words.length)*$(".container-fluid").width()  +"px");
        var totalTime = words.length/wpm * 60;
        var spentTime = wordIndex/wpm * 60;
        var timeRemaining = Math.floor(totalTime-spentTime);
        
        $("#speedTimeRemaining").text(secondsToString(timeRemaining,"left"));
    }

    function getDelayMultiplierForWord(word) {

        if (variableDelayMethod == DelayMethods.DYNAMIC) {
            var waitAfterShortWord = 1.2;
            var waitAfterComma = 2;
            var waitAfterPeriod = 3;
            var waitAfterParagraph = 3.5;
            var waitAfterLongWord = 1.5;
            if(word == "Mr." ||
              word == "Mrs." ||
              word == "Ms.") return 1;
            var lastChar = word[word.length - 1];
            if(lastChar.match('”|"')) lastChar = word[word.length - 2];
            if(lastChar == '\n') return waitAfterParagraph;
            if('.!?'.indexOf(lastChar) != -1) return waitAfterPeriod;
            if(',;:–'.indexOf(lastChar) != -1) return waitAfterComma;
            if(word.length < 4) return waitAfterShortWord;
            if(word.length > 11) return waitAfterLongWord;

            return 1;

        } else {
            if (word.substr(word.length-1).match(/[\.,:?!\-––:)]/)
                || word.substring(0,1).match(/[A-Z]/)
                || word.length > 7) {
                return 1.15;
            } else {
                return 1;
            } 
        }
    }

    function step() {
        if (!isPlaying) return;
        currentWord++;
        if (currentWord < textNodes.length) {
            wordEl.removeChild(wordEl.firstChild);
            wordEl.appendChild(textNodes[currentWord]);
        }

        if (!tracked && currentWord > words.length/2) {
            tracked = true;
            $.post("/article/"+$('#story').attr('data-id')+"/speed_read", {wpm: wpm}).success(function(response) {
            }).error(function(response) {
                tracked = false;
            });
        }

        if (currentWord+1 < words.length) {
            setTimeout(step, Math.ceil(delay * getDelayMultiplierForWord(words[currentWord])));
        } else {
            setTimeout(function() { showEndState() }, 500);
        }
    }

    function showEndState() {
        $(".speed_controls_ui").removeClass("visible");
        $(".speed_playmode_ui").removeClass("visible");
        $(".speed_controls_ui").css('display','');
        $(".read_content_container").css('display','');
        $(".speed_endstate_ui").css('display','');


        var timeSpent = Math.floor(words.length / wpm * 60);
        var timeSaved = Math.floor(words.length / MIN_WPM * 60 - timeSpent);

        $("#speedWordsRead").text(words.length);
        $("#speedTimeSpent").text(secondsToString(timeSpent,null, true));
        $("#speedTimeSaved").text(secondsToString(timeSaved,null, true));
        $("#speedTotalTimeSaved").text(secondsToString(totalTimeSaved+timeSaved,null, true));


        if (!$('#speedRead').attr('data-unlimited')) {
            $("#speedArticlesLeft").text( $('#speedRead').attr('data-remaining') - 1);
        } else {
            $("#speedPremiumBar").css('display','none');
        }

        adjustLayout();
        setTimeout(function() {
            $(".speed_endstate_ui, .page_header_read, .speed_time_remaining").addClass("visible");
        }, 300);

        $("#speedTimeRemaining").text("End of Article");
        finished = true;               
    }

    function updateWpm() {
        wpm = $("#wpmControl").val();
        delay = 60.0/wpm * 1000;
        createCookie('iptwpm', wpm, 3650);
        $("#wpmLabel").text(wpm +" words per minute")
    }



    function layoutScrollView() {
        var textWidth = $("#speedRuler").width()+10;
        var nua = navigator.userAgent;
        var padding = $(".container-fluid").width()/2-60;
        var isAndroidOrIE = nua.indexOf('Trident') > 0 || (nua.indexOf('Mozilla/5.0') > -1 && nua.indexOf('Android ') > -1 && nua.indexOf('AppleWebKit') > -1);

        $("#speedScroller").width( (textWidth+padding*2+ (isAndroidOrIE ? words.length*2.5 : 0)) + "px");
        $("#speedScroller").css('padding-left', padding+'px');

        if (iScroll) {
            iScroll.refresh();
            scrollToWord(currentWord);
        }
    }

    function findElementByText(node, text, occurrence, currentOccurrence) {
        currentOccurrence = currentOccurrence || 0;

        if(node.nodeValue != null && (sanitizeString(node.nodeValue)+" ").indexOf(text+" ") != -1) {
            currentOccurrence++;
            if (currentOccurrence == occurrence) return { node: node.parentNode };
        }

        for (var i = 0; i < node.childNodes.length; i++) {
            var returnValue = findElementByText(node.childNodes[i], text,occurrence,currentOccurrence);
            if (returnValue.currentOccurrence) {
                currentOccurrence = returnValue.currentOccurrence;
            } else if (returnValue.node) {
                return {node: returnValue.node};
            }
        }

        return { currentOccurrence: currentOccurrence };
    }


    function close() {
        $(".speed_fade_out").removeClass('invisible');
        $(".read_content_container").css('display','');
        isPlaying = false;
        $(".control_bar_item").removeClass("hidden");
        $(".js_close").addClass("hidden");

        $("body").removeClass("speed_mode");

        iScroll.destroy();
        $("body").unbind('touchstart');
        $("#wpmControl").unbind();
        $("#speedScrollerContainer").unbind();
        $(".js_close").unbind();
        $(window).unbind("resize", adjustLayout);
        $(window).unbind("keypress", keyHandler);
        $(document).unbind("font_changed");
        $(document).unbind("click",toggleHandler);
        $(window).unbind("orientationchange", orientationHandler);   
        if ($('#story').length) {
            var result = findElementByText(document.getElementById("story"), words[currentWord], occurrenceMap[currentWord])
            if (result.node) {
                window.scrollTo( 0, $(result.node).offset().top-$(".page_header_read").height()-5);           
            } else {
                window.scrollTo( 0, $(document).height()*(currentWord/words.length)-$(window).height())                       
            }
        }
        $(".speed_controls_ui").not("#speedReadProgress").addClass("visible")
        setTimeout(function() {
            $(".speed_read").css('display','none');
            $("#speedScroller").removeAttr("style");
            $(".speed_endstate_ui").removeClass("visible");
            $("._speed_endstate_ui").removeClass("speed_endstate_ui");
            $("._speed_controls_ui").removeClass("speed_controls_ui").removeClass("invisible");
        },500);

        return false;
    }

    function getScrollProgress() {
        var scrollTop = $(window).scrollTop(),
            bodyHeight = $("body").outerHeight(),
            readProgress = 0;
        if ( (scrollTop <= 0) || (scrollTop > bodyHeight - 1000)) {
            readProgress = 0
        } else {
            readProgress = (scrollTop/(bodyHeight + 240)).toFixed(6)
        }
        return readProgress;
    }



    function firstElementAfterOffset(el, offset) {
        if (el == undefined || el.innerText == undefined)
            return undefined;
        var text = el.innerText.replace(/(\r\n|\n|\r)/gm," ").trim();
        if (text.length == 0)
            return undefined;
        else if (el.getBoundingClientRect().top + window.pageYOffset > offset) {
            return el;
        }
        
        for (var i = 0; i < el.children.length; i++) {
            if (el.children[i].nodeName.toLowerCase() == 'a')
                continue;
            var ret = firstElementAfterOffset(el.children[i], offset);
            if (ret != undefined)
                return ret;
        }
        
        return undefined;
    }

    function findFirstWord() {
        if (!$('#story').length) {
            return 0;
        }

        var topMostY = Math.max($("#story")[0].getBoundingClientRect().top,110);
        var topMostEl = firstElementAfterOffset(document.getElementById("story"), $(window).scrollTop()+$("#control_bar").height());
        var word = -1;

        if (topMostEl && topMostEl.id != "story") {
            var str = sanitizeString( getInnerText(topMostEl) );
            var index = text.indexOf(str);
            if (index != -1) {
                word = text.substring(0,index-1).split(" ").length;
            }
        }
        return word;
    }

    function processText() {
        if (jsFallback) {
            text = sanitizeString(text);
        }
        words = text.split(" ");
        if (occurrenceMap && occurrenceMap.length > 0) return;
        var occurrenceTree = {};
        for (var i = 0;i<words.length; i++) {
            var ocNode = occurrenceTree[words[i]];
            if (!ocNode) {
                ocNode = occurrenceTree[words[i]] = {};
            }
            occurrenceMap[i] = ocNode[i] = Object.keys(ocNode).length+1;
            textNodes.push(document.createTextNode(words[i]));
        }
    }

    function init() {
        processText();
        currentWord = findFirstWord();

        if (currentWord == -1) {
            var progress = getScrollProgress();
            currentWord = Math.floor(words.length * progress);
        }

        $("body").bind('touchstart', function(e){         
            if (e.target.id != "wpmControl") e.preventDefault(); 
        });
        $(window).bind("keypress",keyHandler);
        $(window).bind("orientationchange", orientationHandler); 
        $(document).bind("click",toggleHandler);         
        $(document).bind('font_changed', function() {
            layoutScrollView();
            scrollToWord(currentWord);
         });

        if (jsFallback) {
            initScrollerDom();
        }

        $(".speed_playmode_ui").addClass("visible");
        $(".speed_endstate_ui").not(".speed_fade_out").css("display", "none");
        $(".speed_endstate_ui").removeClass("visible");
        $(".speed_controls_ui").removeClass("visible");
        $(".speed_read").css('display','block');

        
        setTimeout(function() {
            $("body").addClass("speed_mode");
            $(".speed_fade_out").addClass('invisible');
            setTimeout(function() {
                setProgress(currentWord);
                $("._speed_endstate_ui").addClass("speed_endstate_ui");
                $("._speed_controls_ui").addClass("speed_controls_ui");
                $(".speed_endstate_ui").not(".speed_fade_out").css("display", "none");
                $(".control_bar_item").not(".js_close,.js_read_options_popover").addClass("hidden");
                $(".js_close").removeClass("hidden");
                 $('#speedScrollerContainer').css({
                    paddingTop: $('#speedWordContainer').offset().top
                  });
            },500);

            $(".page_header_read").addClass("speed_controls_ui");

            wordEl.innerHTML = words[currentWord];


            if (window.navigator.userAgent.indexOf("Trident") > 0) {
                $("#wpmControl").on('change', updateWpm);  
            } else {
                $("#wpmControl").on('input', updateWpm);
            }
            $(window).on('resize', adjustLayout);    
            $(".js_close").on("click touchstart", close)

            // iScroll
            iScroll = new IScroll("#speedScrollerContainer", {  mouseWheel: true, eventPassthrough: true, scrollX: true, scrollY: false, preventDefault: false})


            iScroll.on('scrollEnd', function() {
                if (isPlaying) return;
                if (scrollPoller) {
                    clearInterval(scrollPoller);
                    scrollPoller = null;
                }
                if (!isScrolling) {
                    // This was triggerd by snap-releated scroll (i.e. not user scroll). Don't snap again
                    return;
                }
                if (isSnapping) {
                    isSnapping = false; 
                    return;
                }
                isSnapping = true;
                snapStart = new Date().getTime();
                var centerX = $(window).width()/2, centerY = $("#speedScroller").position().top+5;
                centerX += this.directionX * 50;
                var targetEl = document.elementFromPoint(centerX,centerY);
                if (!targetEl || targetEl.id.indexOf("speedWord") != 0) return;
                var newX = getElementSnapX(targetEl);
                iScroll.scrollTo(newX,0, 500,IScroll.utils.bounce);
                currentWord = $(targetEl).attr("id").substring("speedWord-".length);
                $("#speedWordContainer").text(words[currentWord]);
            });

            iScroll.on('beforeScrollStart', function() {
                if (isPlaying) return;
                isScrolling = true;
                isSnapping = false;
            });
            iScroll.on('scrollStart', function() {
                if (isPlaying) return;
                if (scrollPoller) clearInterval(scrollPoller);
                scrollPoller = setInterval(pollScroll, 30);
            });

            adjustLayout({justSingleWord: true});
            setTimeout( function() { adjustLayout(); }, 500);


            setTimeout(function() {
                processText();
                $(".read_content_container").not(".speed_time_remaining").css('display','none');
                step();
            },800);
        }, 100);

    }
    function pollScroll() {
        if (isPlaying && scrollPoller) {
             clearInterval(scrollPoller);
        }
        var centerX = $(window).width()/2, centerY = $("#speedScroller").position().top+5;
        centerX += iScroll.directionX * 50;        
        var targetEl = document.elementFromPoint(centerX,centerY);
        if (!targetEl || targetEl.id.indexOf("speedWord") != 0) return;
        var wordIndex = $(targetEl).attr("id").substring("speedWord-".length);
        setProgress(wordIndex);
    }
       
    function scrollToWord(wordIndex) {
        if (wordIndex >= words.length) wordIndex = words.length-1;
        var wordX = getElementSnapX(document.getElementById("speedWord-"+wordIndex));
        iScroll.scrollTo(wordX + ($("body").is(".lyon_mode") ? 0 : 1.5) ,0, 0);
    }
    function togglePlay() {
        if (finished) return;
        if (isPlaying) {
            $(".speed_controls_ui").css('display','');
            isPlaying = false;
            setProgress(currentWord);            
            if (orientationChanged) {
                orientationChanged = false;
                adjustLayout();
            }

            scrollToWord(currentWord);
            $(".speed_playmode_ui").removeClass("visible");
            $(".speed_controls_ui").addClass("visible");
        } else {
            if (scrollPoller) {
                clearInterval(scrollPoller);
                scrollPoller = null;
            }            
            isPlaying = true;
            $(".speed_controls_ui").removeClass("visible");
            $(".speed_playmode_ui").addClass("visible");

            setTimeout(function() {
                if (!isPlaying) return;
                $(".speed_controls_ui").not("#speedTimeRemaining").css('display','none');
                step();
            },500);    

        }
    }

    
    function getInnerText(el) {
        if (el.innerText) {
            return el.innerText;
        } else if (typeof window.getSelection != "undefined") {
            var sel = window.getSelection();
            sel.removeAllRanges();
            var range = document.createRange();
            range.selectNodeContents(el);
            sel.addRange(range);
            var text = sel.toString();
            sel.removeAllRanges();
            return text;
        }
        return el.textContent;
    }



    init();



}

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
(function() {
  'use strict';
  var __slice = [].slice;

  ($(document)).ready(function() {
    var $meta_read_time, android, attachReadOptionsHandlers, attachWindowScrollHandler, batchModifyArticles, body_height, body_scrollheight, body_width, bookmark_id, chrome, control_bar_overcycle_delay, control_bar_overcycle_timeout, createCookie, dismissModal, edge_threshold_px, firefox, fullscreen, gaLog, handleScroll, handleTouchScroll, hideControlBar, hover_reveal_delay, hover_reveal_timeout, initialize, ios, ipad, iphone, isMobile, last_scroll_top, left_context_metadata_threshold, mouse_x, mouse_y, onViewportResize, openModal, orientationChangeEvent, page_x, page_y, popover_bodystate, readProgress, read_check, read_progress, read_progress_last_scrolltop, resetInterface, safari, scrolltopMax, showControlBar, show_control_bar_buffer, show_control_bar_buffer_delay, show_control_bar_buffer_scrolltop, submitProgress, submitting, touch, ua, updateControlBar, updateOvercycleTimeout, webkit, window_height, window_width, words;
    createCookie = function(name, value, days) {
      var cookie, date, expires;
      if (days) {
        date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
      } else {
        expires = "";
      }
      cookie = name + "=" + escape(value) + expires + "; path=/";
      return document.cookie = cookie;
    };
    ua = navigator.userAgent;
    iphone = ~ua.indexOf('iPhone') || ~ua.indexOf('iPod');
    ipad = ~ua.indexOf('iPad');
    ios = iphone || ipad;
    chrome = ~ua.indexOf('Chrome');
    firefox = ~ua.indexOf('Firefox');
    safari = ~ua.indexOf("Safari");
    touch = ($('html')).hasClass('touch');
    if (chrome && safari) {
      safari = false;
    }
    fullscreen = window.navigator.standalone;
    android = ~ua.indexOf('Android');
    webkit = ~ua.indexOf('WebKit');
    window_width = ($(window)).width();
    window_height = ($(window)).height();
    body_width = ($('body')).outerWidth();
    body_height = ($('body')).outerHeight();
    body_scrollheight = ($('body'))[0].scrollHeight;
    window.webkit = webkit;
    popover_bodystate = void 0;
    isMobile = function() {
      return ios || android || ($(window)).width() < 752;
    };
    scrolltopMax = function() {
      return body_scrollheight - window_height;
    };
    initialize = function() {
      var $initial_highlight, highlight_id, highlight_position;
      ($(window)).resize(onViewportResize);
      readProgress();
      FastClick.attach(document.body);
      $.bigfoot();
      if (window.applyHighlights) {
        window.applyHighlights();
      }
      if (window.initial_highlight_id) {
        highlight_id = window.initial_highlight_id;
        $initial_highlight = $(".highlight[data-api-id=" + highlight_id + "]");
        if ($initial_highlight.length > 0) {
          highlight_position = $initial_highlight.offset().top;
          window.initial_scroll_position = highlight_position - window_height / 2.5;
        }
      }
      if (window.initial_scroll_position) {
        setTimeout((function() {
          scrollTo(0, window.initial_scroll_position);
          return attachWindowScrollHandler();
        }), 0);
      } else {
        updateControlBar(0);
        attachWindowScrollHandler();
      }
      return setTimeout((function() {
        ($('body')).removeClass('preload');
        ($('#reflow'))[0].style.display = 'none';
        ($('#reflow'))[0].offsetHeight;
        return ($('#reflow'))[0].style.display = 'block';
      }), 300);
    };
    onViewportResize = function() {
      window_width = ($(window)).width();
      window_height = ($(window)).height();
      return resetInterface();
    };
    gaLog = function() {
      var bins;
      bins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!bins || bins.length <= 1) {
        return false;
      }
      bins.unshift('event');
      bins.unshift('send');
      window.ga.apply(null, bins);
      return true;
    };
    orientationChangeEvent = window.onorientationchange ? "orientationchange" : "resize";
    window.addEventListener(orientationChangeEvent, (function(e) {
      return resetInterface();
    }), false);
    resetInterface = function() {
      $('body').removeClass(popover_bodystate);
      popover_bodystate = null;
      $('.js_popover').popover('hide');
      $('.js_tooltip').tooltip('destroy');
      if (!isMobile()) {
        return $('.js_tooltip').tooltip({
          trigger: 'hover focus'
        });
      }
    };
    window.resetInterface = resetInterface;
    batchModifyArticles = function(action, articles, folder_id) {
      var $element, action_name, count, data, error, event, href, noun, post_redirect, success;
      if (folder_id == null) {
        folder_id = false;
      }
      if (typeof articles === 'object' && articles.currentTarget) {
        event = articles;
        event.preventDefault();
        event.stopPropagation();
        $element = $(event.currentTarget);
        articles = $element.attr('data-article-id');
        folder_id = $element.attr('data-folder-id');
        post_redirect = $element.attr('data-post-redirect');
      }
      articles = typeof articles === 'number' ? [articles] : articles;
      articles = typeof articles === 'string' ? [parseInt(articles)] : articles;
      if (!(articles instanceof Array)) {
        return false;
      }
      if (action === "archive") {
        href = "/archive_articles";
      } else if (action === "move") {
        if (folder_id === false) {
          return false;
        }
        href = "/move_articles/" + folder_id;
      } else if (action === "unarchive") {
        href = "/unarchive_articles";
      } else if (action === "delete") {
        href = "/delete_articles";
      } else {
        return false;
      }
      action_name = action;
      if (articles.length > 1) {
        action_name = 'bulk ' + action;
      }
      gaLog('read', action_name);
      success = function(response) {
        if (post_redirect) {
          window.location.href = post_redirect;
        }
        if (action === "move") {
          ($('.menu_item_folder')).removeClass('active');
          return ($(".menu_item_folder[data-folder-id=" + folder_id + "]")).addClass('active');
        }
      };
      error = function(response) {};
      count = articles.length;
      noun = count === 1 ? "article" : "articles";
      count = count === 1 ? "this" : count;
      data = articles;
      if (action !== "delete" || confirm("Are you sure you want to permanently delete " + count + " " + noun + "?")) {
        $.ajax({
          type: "POST",
          url: href,
          data: JSON.stringify(data),
          success: success,
          error: error
        });
      }
      return false;
    };
    ($('.js_archive_single')).on('click touchstart', batchModifyArticles.bind(null, 'archive'));
    ($('.js_restore_single')).on('click touchstart', batchModifyArticles.bind(null, 'unarchive'));
    ($('.js_delete_single')).on('click touchstart', batchModifyArticles.bind(null, 'delete'));
    ($('.js_move_single')).on('click touchstart', batchModifyArticles.bind(null, 'move'));
    ($('.js_move_single_popover')).on('shown.bs.popover', function() {
      return ($('.popover .js_move_single')).on('click', function(e) {
        return batchModifyArticles.bind(this, 'move')(e);
      });
    });
    ($('body')).on('click', function(e) {
      resetInterface();
      ($('.evernote_share_menu')).removeClass('active');
      return true;
    });
    ($('.js_galog')).on('click tap submit', function(e) {
      var b, bins;
      bins = ($(this)).attr('data-bins');
      bins = (function() {
        var _i, _len, _ref, _results;
        _ref = bins.split(',');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          _results.push(b.trim());
        }
        return _results;
      })();
      gaLog.apply(null, bins);
      return false;
    });
    $('.js_popover').popover({
      animation: false,
      html: true,
      trigger: 'manual',
      container: '#control_bar',
      content: function() {
        var target;
        target = $(this).data('target');
        return ($(target)).html();
      }
    });
    if (touch) {
      ($('.primary_bar')).on('touchstart touchmove touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      });
    }
    ($('.js_popover')).on('click touchstart', function(e) {
      var new_popover_bodystate;
      e.preventDefault();
      e.stopPropagation();
      new_popover_bodystate = $(this).data('bodystate');
      if (new_popover_bodystate === popover_bodystate) {
        ($(this)).popover('hide');
        resetInterface();
        return false;
      }
      resetInterface();
      popover_bodystate = new_popover_bodystate;
      $('body').addClass(popover_bodystate);
      $('.js_popover').not(this).popover('hide');
      $(this).popover('show');
      $('.js_tooltip').tooltip('hide');
      $('.js_tooltip').tooltip('destroy');
      ($('.popover')).on('click', function(e) {
        return e.stopPropagation();
      });
      return false;
    });
    ($('.js_read_options_popover')).on('shown.bs.popover', function() {
      return attachReadOptionsHandlers('.popover');
    });
    attachReadOptionsHandlers = function(parent_selector) {
      var current_margin_mode, current_size_mode;
      if (parent_selector == null) {
        parent_selector = '.popover';
      }
      ($("" + parent_selector + " .js_font_choice")).on('click', function(e) {
        var choice;
        ($('body')).removeClass('lyon_mode tisa_mode georgia_mode proxima_mode verdana_mode helvetica_mode');
        choice = ($(this)).attr('data-choice');
        ($('body')).addClass(choice);
        createCookie('iptfont', choice, 3650);
        $.event.trigger("font_changed", choice);
        gaLog('read', 'font');
        return false;
      });
      ($("" + parent_selector + " .js_swatch")).on('click', function(e) {
        var new_mode;
        new_mode = ($(this)).data('color-mode');
        if (($('body')).hasClass(new_mode)) {
          return false;
        }
        ($('.js_swatch')).removeClass('active');
        $('.js_swatch').removeClass('active');
        $(".js_swatch[data-color-mode=" + new_mode + "]").addClass('active');
        ($('body')).removeClass('lightmode stormmode sepiamode darkmode');
        ($('body')).addClass(new_mode);
        createCookie('iptcolor', new_mode, 3650);
        gaLog('read', 'theme change', new_mode);
        return false;
      });
      current_size_mode = parseInt(($('body')).data('sizemode'));
      ($("" + parent_selector + " .js_font_size_rocker")).on('click', function(e) {
        var new_size, size_class;
        ($(this)).removeClass('pulse');
        new_size = current_size_mode + parseInt(($(this)).attr('data-direction'));
        if (new_size === current_size_mode) {
          return false;
        }
        if (new_size < 1) {
          new_size = 1;
        }
        if (new_size > 6) {
          new_size = 6;
        }
        size_class = "size" + new_size + "mode";
        current_size_mode = new_size;
        ($('body')).removeClass('sizeNaNmode size1mode size2mode size3mode size4mode size5mode size6mode');
        ($('body')).data('sizemode', new_size).addClass(size_class);
        createCookie('iptsize', new_size, 3650);
        ($(this)).removeClass('pulse');
        ($(this))[0].offsetWidth = ($(this))[0].offsetWidth;
        ($(this)).addClass('pulse');
        gaLog('read', 'font_size', str(new_size));
        return false;
      });
      if (($('body')).hasClass('narrowmode')) {
        current_margin_mode = 1;
      }
      if (($('body')).hasClass('medwidthmode')) {
        current_margin_mode = 2;
      }
      if (($('body')).hasClass('widemode')) {
        current_margin_mode = 3;
      }
      current_size_mode = parseInt(($('body')).data('sizemode'));
      return ($("" + parent_selector + " .js_margin_size_rocker")).on('click', function(e) {
        var new_margin_mode, new_margin_mode_name;
        new_margin_mode = current_margin_mode + parseInt(($(this)).attr('data-direction'));
        if (new_margin_mode === current_margin_mode) {
          return false;
        }
        if (new_margin_mode <= 1) {
          new_margin_mode_name = 'narrowmode';
        }
        if (new_margin_mode === 2) {
          new_margin_mode_name = 'medwidthmode';
        }
        if (new_margin_mode >= 3) {
          new_margin_mode_name = 'widemode';
        }
        if (($('body')).hasClass(new_margin_mode_name)) {
          return false;
        }
        current_margin_mode = new_margin_mode;
        ($('body')).removeClass('narrowmode medwidthmode widemode');
        ($('body')).addClass(new_margin_mode_name);
        createCookie('iptwidth', new_margin_mode_name, 3650);
        ($(this)).removeClass('pulse');
        ($(this))[0].offsetWidth = ($(this))[0].offsetWidth;
        ($(this)).addClass('pulse');
        gaLog('read', 'margins', new_margin_mode_name);
        return false;
      });
    };
    if (!isMobile()) {
      $('.js_tooltip').tooltip({
        trigger: 'hover'
      });
    }
    if (!!$("#speedRead").length) {
      ($('.js_speed_read')).on('click touchstart', function(e) {
        speedRead();
        return false;
      });
    }
    ($('.js_star_toggle')).on('click touchstart', function(e) {
      var data, href;
      href = ($(this)).attr('href');
      data = "ajax=1";
      ($(this)).toggleClass('starred');
      gaLog('read', 'like toggle');
      $.get(href, data, function(response) {});
      return false;
    });
    ($('.js_read_later')).click(function() {
      var $button, data, href;
      $button = $(this);
      href = $button.attr('href');
      data = "ajax=1";
      $button.addClass('loading');
      $button.text('Saving...');
      $.get(href, data, function(response) {
        $button.text('Saved');
        return $button.removeClass('loading').addClass('saved');
      });
      return false;
    });
    openModal = function(e) {
      var $target_modal, focus_delay, target;
      resetInterface();
      ($('.modal')).removeClass('active');
      ($('#modal_backer')).addClass('active');
      ($('body')).addClass('modal_active');
      target = ($(this)).attr('data-modal');
      $target_modal = $('#' + target);
      ($('body')).css({
        'max-height': "" + window_height + "px"
      });
      $target_modal.addClass('active');
      focus_delay = touch ? 1000 : 0;
      setTimeout((function() {
        return $target_modal.find('input[type="text"], input[type="password"]').first().focus();
      }), focus_delay);
      return false;
    };
    dismissModal = function() {
      ($('body')).css({
        'max-height': 'none'
      });
      ($('#modal_backer')).removeClass('active');
      ($('.modal')).removeClass('active');
      ($('body')).removeClass('modal_active');
      return false;
    };
    ($('.open_modal')).on('click tap', function(e) {
      return openModal.bind(this)(e);
    });
    ($('#modal_backer')).on('click tap', function(e) {
      return dismissModal();
    });
    ($('.modal_close')).on('click tap', function() {
      return dismissModal();
    });
    bookmark_id = ($('#story')).attr('data-id');
    words = ($('#story')).attr('data-words');
    $meta_read_time = $('.meta_read_time');
    read_check = 0;
    read_progress = 0;
    read_progress_last_scrolltop = 0;
    submitting = 0;
    submitProgress = function() {
      var data;
      data = "progress=" + read_progress + "&ajax=1";
      return $.get("/set_progress/" + bookmark_id, data, function(response) {
        return submitting = 0;
      });
    };
    readProgress = function() {
      var read_multiplier, read_time, read_val, scroll_top;
      scroll_top = ($(window)).scrollTop();
      if ((scroll_top <= 0) || (scroll_top > (body_height - 1000))) {
        read_progress = 0;
        read_val = Math.ceil(words / 240);
        read_time = read_val + ' min';
        $meta_read_time.text(read_time);
      } else {
        read_progress = (scroll_top / (body_height + 240)).toFixed(6);
        read_multiplier = 1 - read_progress;
        if (read_multiplier > 1) {
          read_multiplier = 1;
        }
        read_val = Math.ceil((words * read_multiplier) / 240);
        read_time = read_val + ' min remaining';
        $meta_read_time.text(read_time);
      }
      if ((scroll_top > (read_progress_last_scrolltop + 20)) || (scroll_top < (read_progress_last_scrolltop - 20))) {
        read_progress_last_scrolltop = scroll_top;
        if (submitting === 0) {
          submitting = 1;
          return submitProgress();
        }
      }
    };
    page_x = 20;
    page_y = 20;
    mouse_x = 20;
    mouse_y = 20;
    if (!touch) {
      ($(document)).mousemove(function(e) {
        mouse_x = e.clientX;
        mouse_y = e.clientY;
        page_x = e.pageX;
        return page_y = e.pageY;
      });
    } else {
      page_x = page_y = mouse_x = mouse_y = 0;
    }
    edge_threshold_px = touch ? 20 : 60;
    last_scroll_top = null;
    hover_reveal_timeout = null;
    hover_reveal_delay = 200;
    left_context_metadata_threshold = 80;
    show_control_bar_buffer = null;
    show_control_bar_buffer_delay = touch ? 50 : 300;
    show_control_bar_buffer_scrolltop = 0;
    control_bar_overcycle_delay = touch ? 300 : 700;
    control_bar_overcycle_timeout = null;
    handleScroll = function(st) {
      if (words) {
        readProgress();
      }
      return updateControlBar(st);
    };
    handleTouchScroll = function(e) {
      return handleScroll(($(window)).scrollTop());
    };
    attachWindowScrollHandler = function() {
      if (touch) {
        return ($('body')).on({
          'touchmove': handleTouchScroll,
          'touchend': handleTouchScroll
        });
      } else {
        return ($(window)).scroll(function(e) {
          return handleScroll(($(window)).scrollTop());
        });
      }
    };
    updateOvercycleTimeout = function() {
      if (control_bar_overcycle_timeout === null) {
        return control_bar_overcycle_timeout = setTimeout((function() {
          clearTimeout(control_bar_overcycle_timeout);
          return control_bar_overcycle_timeout = null;
        }), control_bar_overcycle_delay);
      } else {

      }
    };
    showControlBar = function(scroll_top, force) {
      var diff;
      if (scroll_top == null) {
        scroll_top = null;
      }
      if (force == null) {
        force = false;
      }
      if (scroll_top !== null) {
        diff = Math.abs(scroll_top - last_scroll_top);
        if (diff >= 15 || force) {
          last_scroll_top = scroll_top;
        }
      }
      if (!force) {
        if (($('#control_bar')).hasClass('reveal')) {
          return;
        }
        if (control_bar_overcycle_timeout !== null) {
          return;
        }
      }
      ($('#control_bar')).addClass('reveal');
      clearTimeout(hover_reveal_timeout);
      clearTimeout(show_control_bar_buffer);
      hover_reveal_timeout = null;
      show_control_bar_buffer = null;
      show_control_bar_buffer_scrolltop = 0;
      if (!force) {
        return updateOvercycleTimeout();
      }
    };
    hideControlBar = function(scroll_top, force) {
      var diff;
      if (scroll_top == null) {
        scroll_top = null;
      }
      if (force == null) {
        force = false;
      }
      if (scroll_top !== null) {
        diff = Math.abs(scroll_top - last_scroll_top);
        if (diff >= 15 || force) {
          last_scroll_top = scroll_top;
        }
      }
      if (!force) {
        if ($('body').attr('class').indexOf('_popover') !== -1) {
          return;
        }
        if (!($('#control_bar')).hasClass('reveal')) {
          return;
        }
        if (control_bar_overcycle_timeout !== null) {
          return;
        }
      }
      ($('#control_bar')).removeClass('reveal');
      clearTimeout(hover_reveal_timeout);
      clearTimeout(show_control_bar_buffer);
      hover_reveal_timeout = null;
      show_control_bar_buffer = null;
      show_control_bar_buffer_scrolltop = 0;
      if (!force) {
        return updateOvercycleTimeout();
      }
    };
    updateControlBar = function(scroll_top_update) {
      var diff;
      if (scroll_top_update < 0 || scroll_top_update > scrolltopMax()) {
        return;
      }
      if (last_scroll_top === null) {
        last_scroll_top = scroll_top_update;
        return;
      }
      diff = Math.abs(scroll_top_update - last_scroll_top);
      if (scroll_top_update <= edge_threshold_px) {
        showControlBar(scroll_top_update, true);
      } else if (scroll_top_update >= (scrolltopMax() - edge_threshold_px)) {
        hideControlBar(scroll_top_update, true);
      } else if (scroll_top_update >= last_scroll_top && diff >= 5) {
        if (isMobile() || mouse_y > edge_threshold_px) {
          hideControlBar(scroll_top_update);
        }
      } else if (scroll_top_update < last_scroll_top && diff >= 5) {
        if (scroll_top_update >= 0 && scroll_top_update <= scrolltopMax() && scroll_top_update <= (last_scroll_top - 50)) {
          showControlBar(scroll_top_update);
        }
      }
      if (scroll_top_update > left_context_metadata_threshold) {
        return ($('#left_context_metadata')).addClass('reveal');
      } else {
        return ($('#left_context_metadata')).removeClass('reveal');
      }
    };
    ($('.js_control_bar_recall')).hover((function() {
      if (hover_reveal_timeout !== null) {
        return;
      }
      clearTimeout(control_bar_overcycle_timeout);
      control_bar_overcycle_timeout = null;
      return hover_reveal_timeout = setTimeout((function() {
        showControlBar($(window).scrollTop());
        return hover_reveal_timeout = null;
      }), hover_reveal_delay);
    }), (function() {
      if (hover_reveal_timeout !== null) {
        clearTimeout(hover_reveal_timeout);
        return hover_reveal_timeout = null;
      }
    }));
    ($('.shareOut')).click(function() {
      var h, l, link, t, w;
      link = ($(this)).attr('href');
      w = 450;
      h = 500;
      l = (screen.width / 2) - (w / 2);
      t = (screen.height / 2) - (h / 2);
      window.open(link, 'link out', 'width=' + w + ', height=' + h + ', left=' + l + ', top=' + t + ($('.tableViewCell')).removeClass('moving'));
      ($('.menuContainer')).removeClass('active');
      return false;
    });
    ($('.evernote_share_menu .cancel_box')).click(function() {
      ($('.evernote_share_menu')).removeClass('active');
      ($('.menuContainer')).removeClass('active');
      return false;
    });
    $('.share_to_evernote_form input[type="submit"]').click(function() {
      var data;
      data = ($(this)).parents('.share_to_evernote_form').serialize();
      '';
      ($('.evernote_share_menu')).removeClass('active');
      ($('.menuContainer')).removeClass('active');
      $.post('/user/share_to_evernote', data).success(function(response) {}).error(function(response) {});
      return false;
    });
    initialize();
    return false;
  });

}).call(this);

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_548894e3.js","/")
},{"buffer":2,"oMfpAn":5}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")
},{"base64-js":3,"buffer":2,"ieee754":4,"oMfpAn":5}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
},{"buffer":2,"oMfpAn":5}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")
},{"buffer":2,"oMfpAn":5}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")
},{"buffer":2,"oMfpAn":5}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
